struct Uniforms {
  factor: f32,
}
@group(0) @binding(0) var<uniform> uniforms: Uniforms;
@group(0) @binding(1) var<storage> colors: array<vec3<f32>>;
@group(0) @binding(2) var target: texture_storage_2d<rgba32float, write>;

@compute @workgroup_size(256)
fn compute_pass(@builtin(global_invocation_id) gid: vec3u) {
  textureStore(target, gid.xy, vec4(colors[gid.x].xyz, 1.));
}

alias QuadVertices = array<vec2<f32>, 6>;
var<private> quad_vertices: QuadVertices = QuadVertices(
  vec2<f32>(-1.0,  1.0),
  vec2<f32>(-1.0, -1.0),
  vec2<f32>( 1.0,  1.0),
  vec2<f32>( 1.0,  1.0),
  vec2<f32>(-1.0, -1.0),
  vec2<f32>( 1.0, -1.0)
);

struct VSOut {
  @builtin(position) pos: vec4<f32>,
}
@vertex fn quad_vert(@builtin(vertex_index) vid: u32) -> VSOut {
  return VSOut(vec4<f32>(quad_vertices[vid], 0.0, 1.0));
}

@group(0) @binding(1) var src: texture_2d<f32>;

@fragment fn quad_frag(@builtin(position) pos: vec4f) -> @location(0) vec4f {
  var color = textureLoad(src, vec2u(pos.xy), 0).xyz * uniforms.factor;
  return vec4(color, 1.);
}
